///// EXERCICE 1/////

#include <iostream>

class Complex {
 private:
  double real_;
  double imag_;

 public:
  Complex(double real, double imag) : real_(real), imag_(imag) {}

  double real() const { return real_; }
  double imag() const { return imag_; }

  Complex operator+(const Complex& other) const {
    return Complex(real_ + other.real_, imag_ + other.imag_);
  }

  Complex operator-(const Complex& other) const {
    return Complex(real_ - other.real_, imag_ - other.imag_);
  }

  Complex operator*(const Complex& other) const {
    return Complex(real_ * other.real_ - imag_ * other.imag_,
                   real_ * other.imag_ + imag_ * other.real_);
  }

  Complex operator/(const Complex& other) const {
    double denominator = other.real_ * other.real_ + other.imag_ * other.imag_;
    return Complex((real_ * other.real_ + imag_ * other.imag_) / denominator,
                   (imag_ * other.real_ - real_ * other.imag_) / denominator);
  }
};

std::ostream& operator<<(std::ostream& os, const Complex& c) {
  os << c.real() << "+" << c.imag() << "i";
  return os;
}

int main() {
  Complex c1(1, 2);
  Complex c2(3, 4);

  std::cout << "c1 = " << c1 << std::endl;
  std::cout << "c2 = " << c2 << std::endl;

  Complex c3 = c1 + c2;
  std::cout << "c1 + c2 = " << c3 << std::endl;

  Complex c4 = c1 - c2;
  std::cout << "c1 - c2 = " << c4 << std::endl;

  Complex c5 = c1 * c2;
  std::cout << "c1 * c2 = " << c5 << std::endl;

  Complex c6 = c1 / c2;
  std::cout << "c1 / c2 = " << c6 << std::endl;

  return 0;
}
